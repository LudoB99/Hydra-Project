#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hydra-project:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



var net = require('net');
var server = net.createServer();
var database = require('../database');

server.on('connection', handleConnection);
server.listen(9000, function() {
  console.log('server listening to %j', server.address());
});

function handleConnection(conn) {
  var remoteAddress = conn.remoteAddress + ':' + conn.remotePort;
  console.log('new client connection from %s', remoteAddress);
  conn.on('data', onConnData);
  conn.once('close', onConnClose);
  conn.on('error', onConnError);

  function onConnData(d) {
    console.log('connection data from %s: %j', remoteAddress, d);
    let userInput = binToData(d);
	userInput[0].data = userInput[0].data + 1;

    console.log(userInput);
    conn.write(dataToBin(userInput));
  }

  function onConnClose() {
    console.log('connection from %s closed', remoteAddress);
  }

  function onConnError(err) {
    console.log('Connection %s error: %s', remoteAddress, err.message);
  }
}

function dataToBin(data){
	console.log("sending");
	console.log(data);
	let buffer = Buffer.alloc(data.length * 5);
	for(let i=0; i<data.length; ++i){
		buffer.write(data[i].header, i * 5);
		buffer.writeInt32BE(data[i].data * 100, (i*5) + 1);
	}	
	return buffer;
}


function binToData(bin){
  const dataByteLength = 5;
  let length = bin.length/dataByteLength;
  let data = [];
  for(let i=0; i<length; ++i){
    let entry = {};
    entry.header = String.fromCharCode(bin.readInt8(dataByteLength*i, 1));
    entry.data = bin.readIntBE(dataByteLength*i + 1, 4);
	entry.data /= 100;
    data.push(entry);
  }
  return data;
}

function onConnData(d) {
  console.log('connection data from %s: %j', remoteAddress, d);
  console.log(d);

}

function bin2String(test) {
  var temp =test.substring(0,8);
  console.log(temp);
  var start = String.fromCharCode(parseInt(temp,2));
  console.log(start);
  temp = test.substring(8);
  console.log(temp);
  var b1 = parseInt(temp,2);
  if(b1 > 127) b1 -= 256;

  console.log(start + b1);

  return b1;
}

byteArrayToLong = function(/*byte[]*/byteArray) {
  var value = 0;
  for ( var i = byteArray.length - 1; i >= 0; i--) {
    value = (value * 256) + byteArray[i];
  }

  return value;
};
